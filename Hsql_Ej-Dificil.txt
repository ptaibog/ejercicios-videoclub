-- DIFICULTAD: Difícil


-- 26. Lista nombre, nacionalidad y director de todas las películas
-- ESTO NO TIENE SENTIDO, NO HACE FALTA USAR SUBCONSULTAS, YA QUE PIDO DATOS DE OTRAS TABLAS POR LO QUE EL INNER JOIN ES OBLIGATORIO
SELECT m.MOVIE_NAME, n.NATIONALITY_NAME, d.DIRECTOR_NAME  
FROM PUBLIC.MOVIES m
INNER JOIN PUBLIC.NATIONALITIES n ON m.NATIONALITY_ID = n.NATIONALITY_ID 
INNER JOIN PUBLIC.DIRECTORS d ON m.DIRECTOR_ID = d.DIRECTOR_ID
WHERE m.NATIONALITY_ID IN (SELECT n.NATIONALITY_ID 
						   FROM PUBLIC.NATIONALITIES n )
AND m.DIRECTOR_ID IN (SELECT d.DIRECTOR_ID 
						FROM PUBLIC.DIRECTORS d);


					
SELECT m.MOVIE_NAME, n.NATIONALITY_NAME, d.DIRECTOR_NAME  
FROM PUBLIC.NATIONALITIES n
INNER JOIN PUBLIC.MOVIES m ON n.NATIONALITY_ID = m.NATIONALITY_ID 
INNER JOIN PUBLIC.DIRECTORS d ON m.DIRECTOR_ID = d.DIRECTOR_ID
ORDER BY d.DIRECTOR_ID;


-- 27. Muestra las películas con los actores que han participado en cada una de ellas

SELECT M.MOVIE_NAME AS PELICULA, A.ACTOR_NAME AS ACTOR
FROM PUBLIC.MOVIES m
INNER JOIN PUBLIC.MOVIES_ACTORS ma ON m.MOVIE_ID = ma.MOVIE_ID
INNER JOIN PUBLIC.ACTORS a ON ma.ACTOR_ID = a.ACTOR_ID;
-- GROUP BY M.MOVIE_NAME, A.ACTOR_NAME

-- 28. Indica cual es el nombre del director del que más películas se han alquilado

SELECT d.DIRECTOR_NAME, COUNT(DISTINCT mm.MOVIE_ID)
FROM DIRECTORS d 
INNER JOIN MOVIES m ON d.DIRECTOR_ID = m.DIRECTOR_ID
INNER JOIN MEMBERS_MOVIE_RENTAL mm ON m.MOVIE_ID = mm.MOVIE_ID
GROUP BY d.DIRECTOR_NAME
ORDER BY COUNT(DISTINCT mm.MOVIE_ID) DESC LIMIT 1;


SELECT d.DIRECTOR_NAME, COUNT(DISTINCT mmr.MOVIE_ID) 
FROM DIRECTORS d
INNER JOIN PUBLIC.MOVIES m ON d.DIRECTOR_ID = m.DIRECTOR_ID 
INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL mmr ON m.MOVIE_ID = mmr.MOVIE_ID 
WHERE d.DIRECTOR_ID IN (SELECT m.DIRECTOR_ID 
						FROM PUBLIC.MOVIES m)
AND m.MOVIE_ID IN (SELECT mmr.MOVIE_ID 
					FROM PUBLIC.MEMBERS_MOVIE_RENTAL mmr)
					GROUP BY d.DIRECTOR_NAME 
				ORDER BY COUNT(DISTINCT mmr.MOVIE_ID) DESC;
			
			-- PONEMOS = PORQUE SOLO QUEREMOS UN RESULTADO
			
SELECT d.DIRECTOR_NAME 
FROM PUBLIC.DIRECTORS d
WHERE d.DIRECTOR_ID = (SELECT m.DIRECTOR_ID 
						FROM PUBLIC.MOVIES m
						INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL mmr ON m.MOVIE_ID = mmr.MOVIE_ID
						GROUP BY m.DIRECTOR_ID
						ORDER BY COUNT(DISTINCT mmr.MOVIE_ID)DESC LIMIT 1);

					-- SUBCONSULTA DENTRO DE OTRA SUBCONSULTA
SELECT d.DIRECTOR_NAME 
FROM PUBLIC.DIRECTORS d
WHERE d.DIRECTOR_ID = (SELECT mo.DIRECTOR_ID 
                        FROM PUBLIC.MOVIES mo
                        WHERE mo.MOVIE_ID IN (SELECT mmr.MOVIE_ID--, mmr.MEMBER_RENTAL_DATE  
                                              FROM PUBLIC.MEMBERS_MOVIE_RENTAL mmr
                                              GROUP BY mmr.MOVIE_ID--, mmr.MEMBER_RENTAL_DATE 
                                              ORDER BY COUNT(DISTINCT mmr.MOVIE_ID) DESC
                                              LIMIT 1));
                                             
                                             
-- 29. Indica cuantos premios han ganado cada uno de los estudios con las películas que han creado
-- PONEMOS SUM EN VEZ DE COUNT PORQUE EN CADA PELICULA NOMINADA HA GANADO X PREMIOS
                                             
		SELECT s.STUDIO_NAME, SUM(a.AWARD_WIN)  
		FROM PUBLIC.AWARDS a
		INNER JOIN PUBLIC.MOVIES m ON a.MOVIE_ID = m.MOVIE_ID 
		INNER JOIN PUBLIC.STUDIOS s ON m.STUDIO_ID = s.STUDIO_ID 
		GROUP BY s.STUDIO_ID 
		ORDER BY SUM(a.AWARD_WIN) DESC;
		
					
					
-- 30. Indica el número de premios a los que estuvo nominado un actor, pero que no ha conseguido 
--     (Si una película está nominada a un premio, su actor también lo está)

SELECT a.ACTOR_NAME, SUM(aw.AWARD_ALMOST_WIN) 
FROM PUBLIC.ACTORS a
INNER JOIN PUBLIC.MOVIES_ACTORS ma ON a.ACTOR_ID = ma.ACTOR_ID 
INNER JOIN PUBLIC.MOVIES m ON ma.MOVIE_ID = m.MOVIE_ID 
INNER JOIN PUBLIC.AWARDS aw ON m.MOVIE_ID = aw.MOVIE_ID
GROUP BY a.ACTOR_ID 
ORDER BY SUM(aw.AWARD_ALMOST_WIN) DESC 
	
	
-- 31. Indica cuantos actores y directores hicieron películas para los estudios no activos

SELECT COUNT (DISTINCT a.ACTOR_ID), COUNT(DISTINCT m.DIRECTOR_ID) 
FROM PUBLIC.STUDIOS s
INNER JOIN PUBLIC.MOVIES m ON s.STUDIO_ID = m.STUDIO_ID 
--INNER JOIN PUBLIC.DIRECTORS d ON m.DIRECTOR_ID = d.DIRECTOR_ID (NO HACE FALTA PORQUE YA ESTA EN MOVIES EL ID DE DIRECTORES)
INNER JOIN PUBLIC.MOVIES_ACTORS ma ON m.MOVIE_ID = ma.MOVIE_ID 
INNER JOIN PUBLIC.ACTORS a ON ma.ACTOR_ID = a.ACTOR_ID 
WHERE s.STUDIO_ACTIVE = 0;


-- se puede hacer sin pasar por la tabla actors, ya que tenemos actors_id en movies_actors
SELECT COUNT(DISTINCT a.ACTOR_ID), COUNT(DISTINCT m.DIRECTOR_ID) 
FROM PUBLIC.ACTORS a
INNER JOIN PUBLIC.MOVIES_ACTORS ma ON a.ACTOR_ID = ma.ACTOR_ID 
INNER JOIN	PUBLIC.MOVIES m ON ma.MOVIE_ID = m.MOVIE_ID 
WHERE m.STUDIO_ID IN (SELECT s.STUDIO_ID 
					  FROM PUBLIC.STUDIOS s
					  WHERE s.STUDIO_ACTIVE = FALSE);

-- 32. Indica el nombre, ciudad, y teléfono de todos los miembros del videoclub que hayan alquilado 
--     películas que hayan sido nominadas a más de 150 premios y ganaran menos de 50

SELECT DISTINCT me.MEMBER_NAME, me.MEMBER_TOWN, me.MEMBER_PHONE
FROM MEMBERS me
INNER JOIN MEMBERS_MOVIE_RENTAL mmr ON me.MEMBER_ID = mmr.MEMBER_ID
INNER JOIN MOVIES mo ON mmr.MOVIE_ID = mo.MOVIE_ID 
INNER JOIN AWARDS a ON mo.MOVIE_ID = a.MOVIE_ID
WHERE a.AWARD_NOMINATION > 150 
AND a.AWARD_WIN < 50;

								-- CON UNA SUBCONSULTA

SELECT DISTINCT me.MEMBER_NAME , me.MEMBER_TOWN , me.MEMBER_PHONE
FROM PUBLIC.MEMBERS me
INNER JOIN PUBLIC.MEMBERS_MOVIE_RENTAL mmr ON me.MEMBER_ID = mmr.MEMBER_ID
INNER JOIN PUBLIC.MOVIES mo ON mmr.MOVIE_ID = mo.MOVIE_ID  
INNER JOIN PUBLIC.AWARDS a ON mo.MOVIE_ID = a.MOVIE_ID 
WHERE a.AWARD_ID IN (SELECT a.AWARD_ID 
                     FROM AWARDS a
                     WHERE a.AWARD_NOMINATION > 150
                     AND a.AWARD_WIN < 50);
                    
								-- CON DOS SUBCONSULTAS  
								                 
SELECT me.MEMBER_NAME, me.MEMBER_TOWN, me.MEMBER_PHONE 
FROM MEMBERS me
WHERE me.MEMBER_ID IN (SELECT mmr.MEMBER_ID 
                        FROM MEMBERS_MOVIE_RENTAL mmr
                        WHERE mmr.MOVIE_ID IN (SELECT a.MOVIE_ID 
                                                FROM AWARDS a
                                                WHERE a.AWARD_NOMINATION > 150
                                                AND a.AWARD_WIN < 50));
                                               
                    			-- CON TRES SUBCONSULTAS 
           -- (SERIA IGUAL CON DOS, YA QUE NO ES NECESARIO PASAR POR LA TABLA MOVIES)
                    
SELECT me.MEMBER_NAME, me.MEMBER_TOWN, me.MEMBER_PHONE 
FROM PUBLIC.MEMBERS me
WHERE me.MEMBER_ID IN (SELECT mmr.MEMBER_ID 
					   FROM PUBLIC.MEMBERS_MOVIE_RENTAL mmr
					   WHERE mmr.MOVIE_ID IN (SELECT m.MOVIE_ID 
					   						  FROM PUBLIC.MOVIES m
					   						  WHERE m.MOVIE_ID IN (SELECT a.MOVIE_ID 
					   												FROM PUBLIC.AWARDS a
					   												WHERE a.AWARD_NOMINATION > 150
					   												AND a.AWARD_WIN < 50)));


-- 33. Comprueba si hay errores en la BD entre las películas y directores (un director fallecido en el 76 
--     no puede dirigir una película en el 88)
					   											
SELECT m.MOVIE_NAME, d.DIRECTOR_BIRTH_DATE, m.MOVIE_LAUNCH_DATE, d.DIRECTOR_DEAD_DATE, d.DIRECTOR_NAME 
FROM PUBLIC.MOVIES m
INNER JOIN PUBLIC.DIRECTORS d ON m.DIRECTOR_ID = d.DIRECTOR_ID 
WHERE d.DIRECTOR_DEAD_DATE < m.MOVIE_LAUNCH_DATE
AND d.DIRECTOR_DEAD_DATE IS NOT NULL;
-- OR d.DIRECTOR_BIRTH_DATE > m.MOVIE_LAUNCH_DATE ; ESTE ES OTRO EJ DE FALLO, PODRIAMOS VER MUCHOS MAS
					
									-- CON SUBCONSULTA
SELECT d.DIRECTOR_NAME 
FROM PUBLIC.PUBLIC.DIRECTORS d 
WHERE d.DIRECTOR_ID IN (
    SELECT m.DIRECTOR_ID 
    FROM PUBLIC.PUBLIC.MOVIES m 
    WHERE DATEDIFF(DAY, m.MOVIE_LAUNCH_DATE, d.DIRECTOR_DEAD_DATE) < 0);

-- 34. Utilizando la información de la sentencia anterior, modifica la fecha de defunción a un año más 
--     tarde del estreno de la película (mediante sentencia SQL)

UPDATE DIRECTORS d SET (SUBCONSULTA DATEADD CON MAX)
WHERE (SELECT m.MOVIE_NAME, d.DIRECTOR_BIRTH_DATE, m.MOVIE_LAUNCH_DATE, d.DIRECTOR_DEAD_DATE, d.DIRECTOR_NAME 
FROM PUBLIC.MOVIES m
INNER JOIN PUBLIC.DIRECTORS d ON m.DIRECTOR_ID = d.DIRECTOR_ID 
WHERE d.DIRECTOR_DEAD_DATE < m.MOVIE_LAUNCH_DATE
AND d.DIRECTOR_DEAD_DATE IS NOT NULL;)


UPDATE PUBLIC.DIRECTORS d SET (DATEADD YEAR, 1, MAX(d.DIRECTOR_DEAD_DATE)
WHERE (SELECT m.MOVIE_NAME, d.DIRECTOR_BIRTH_DATE, m.MOVIE_LAUNCH_DATE, d.DIRECTOR_DEAD_DATE, d.DIRECTOR_NAME 
FROM PUBLIC.MOVIES m
INNER JOIN PUBLIC.DIRECTORS d ON m.DIRECTOR_ID = d.DIRECTOR_ID 
WHERE d.DIRECTOR_DEAD_DATE < m.MOVIE_LAUNCH_DATE
AND d.DIRECTOR_DEAD_DATE IS NOT NULL));


UPDATE PUBLIC.DIRECTORS d 
SET DATEADD (YEAR, 1, SELECT (MAX (d.DIRECTOR_DEAD_DATE)= SELECT m.
														FROM PUBLIC.MOVIES m
														INNER JOIN PUBLIC.DIRECTORS d ON m.DIRECTOR_ID = d.DIRECTOR_ID 
														WHERE d.DIRECTOR_DEAD_DATE < m.MOVIE_LAUNCH_DATE
														AND d.DIRECTOR_DEAD_DATE IS NOT NULL))
														
														
UPDATE PUBLIC.DIRECTORS d 
SET d.DIRECTOR_DEAD_DATE = DATEADD (YEAR, 1, (SELECT MAX (m.MOVIE_LAUNCH_DATE) 
                                                    FROM PUBLIC.MOVIES m
                                                    INNER JOIN PUBLIC.DIRECTORS d ON m.DIRECTOR_ID = d.DIRECTOR_ID
                                                    WHERE d.DIRECTOR_DEAD_DATE < m.MOVIE_LAUNCH_DATE))
WHERE d.DIRECTOR_DEAD_DATE < m.MOVIE_LAUNCH_DATE
AND d.DIRECTOR_DEAD_DATE IS NOT NULL;
                           			-- OPCION DEFINITIVA Y CORRECTA
                           			                
UPDATE DIRECTORS d
SET d.DIRECTOR_DEAD_DATE = DATEADD(YEAR, 1,(SELECT MAX(m.MOVIE_LAUNCH_DATE)--
                                            FROM MOVIES m
                                            INNER JOIN DIRECTORS d 
                                            ON m.DIRECTOR_ID = d.DIRECTOR_ID 
                                            WHERE d.DIRECTOR_DEAD_DATE < m.MOVIE_LAUNCH_DATE
                                            AND d.DIRECTOR_DEAD_DATE IS NOT NULL))--SUBCONSULTA VALOR MÁXIMO
WHERE  d.DIRECTOR_ID IN (SELECT d.DIRECTOR_ID 
                           FROM DIRECTORS d 
                           INNER JOIN MOVIES m ON d.DIRECTOR_ID = m.DIRECTOR_ID 
                           WHERE d.DIRECTOR_DEAD_DATE < m.MOVIE_LAUNCH_DATE
                           AND d.DIRECTOR_DEAD_DATE IS NOT NULL); --SUBCONSULTA (DONDE SE APLICA EL CAMBIO)
                                      
                           -- DEVOLVER LOS ERRORES A SU ESTADO ORIGINAL
UPDATE DIRECTORS d
SET d.DIRECTOR_DEAD_DATE = '1995-05-04'
WHERE d.DIRECTOR_ID = 27;

UPDATE DIRECTORS d
SET d.DIRECTOR_DEAD_DATE = '2001-04-08'
WHERE d.DIRECTOR_ID = 47;